From e10a3b1743f8b204777d7cd6a6e88e359da76ad8 Mon Sep 17 00:00:00 2001
From: Qiyuan Pu <puqiyuan@loongson.cn>
Date: Tue, 21 Dec 2021 11:48:19 +0800
Subject: [PATCH 2/7] count page cache distributed

Change-Id: Iad8cafa887a6e7e48293fb7de29ce3a470fd98de
Signed-off-by: Qiyuan Pu <puqiyuan@loongson.cn>
---
 lib/iov_iter.c | 24 ++++++++++++++++++------
 1 file changed, 18 insertions(+), 6 deletions(-)

diff --git a/lib/iov_iter.c b/lib/iov_iter.c
index 829fec3..ef422ca 100644
--- a/lib/iov_iter.c
+++ b/lib/iov_iter.c
@@ -144,7 +144,7 @@ static int copyout(void __user *to, const void *from, size_t n)
 static int copyin(void *to, const void __user *from, size_t n)
 {
 	char *p = to;
-	static unsigned long init_jiff, output, flag, tot_cnt, umiss;
+	static unsigned long init_jiff, output, flag, tot_cnt, umiss, u_map[8], j;
 	if (strcmp(current->comm, target_task) == 0)
 		tot_cnt++;
 	if (strcmp(current->comm, target_task) == 0 && !flag) {
@@ -155,15 +155,21 @@ static int copyin(void *to, const void __user *from, size_t n)
 		output = 1;
 		printk("write umiss:\t%lu\n", umiss);
 		printk("write total:\t%lu\n", tot_cnt);
+		printk("user page distributed:\n");
+		for (j = 0; j < 8; ++j)
+			printk("%lu ", u_map[j]);
+		printk("\n");
 	}
 	if (access_ok(VERIFY_READ, from, n)) {
 		kasan_check_write(to, n);
 		n = raw_copy_from_user(to, from, n);
 	}
 	if (*p == 'a' && *(p + 1) == 'a' && *(p + 2) == 'a' && *(p + 3) == 'a' &&
-		*(p + 4) == 'a' && *(p + 5) == 'a' &&
-		page_to_nid(walk_page_table_one_addr((unsigned long)from)) != (smp_processor_id() / 4))
-		umiss++;
+		*(p + 4) == 'a' && *(p + 5) == 'a') {
+		++u_map[page_to_nid(walk_page_table_one_addr((unsigned long)from))];
+		if (page_to_nid(walk_page_table_one_addr((unsigned long)from)) != (smp_processor_id() / 4))
+			umiss++;
+	}
 
 	return n;
 }
@@ -937,9 +943,11 @@ size_t iov_iter_copy_from_user_atomic(struct page *page,
 		struct iov_iter *i, unsigned long offset, size_t bytes)
 {
 	char *kaddr = kmap_atomic(page), *p = kaddr + offset;
-	static unsigned long init_jiff, output, flag, tot_cnt, kmiss;
-	if (strcmp(current->comm, target_task) == 0)
+	static unsigned long init_jiff, output, flag, tot_cnt, kmiss, pc_map[8], j;
+	if (strcmp(current->comm, target_task) == 0) {
 		tot_cnt++;
+		++pc_map[page_to_nid(page)];
+	}
 	if (strcmp(current->comm, target_task) == 0 && !flag) {
 		flag = 1;
 		init_jiff = jiffies;
@@ -948,6 +956,10 @@ size_t iov_iter_copy_from_user_atomic(struct page *page,
 		output = 1;
 		printk("write kmiss:\t%lu\n", kmiss);
 		printk("write total:\t%lu\n", tot_cnt);
+		printk("page cache distributed:\n");
+		for (j = 0; j < 8; ++j)
+			printk("%lu ", pc_map[j]);
+		printk("\n");
 	}
 	if (strcmp(current->comm, target_task) == 0 && page_to_nid(page) != smp_processor_id()/ 4)
 		kmiss++;
-- 
1.8.3.1

