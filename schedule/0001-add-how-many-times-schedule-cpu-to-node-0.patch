From f9136688e51571dabeb17e67ccc14a710d8befca Mon Sep 17 00:00:00 2001
From: Qiyuan Pu <puqiyuan@loongson.cn>
Date: Tue, 9 Nov 2021 15:51:47 +0800
Subject: [PATCH] add how many times schedule cpu to node 0

Change-Id: Ia42aa711cae25a7f3f2ff49825b2c6134f01b6c4
---
 kernel/sched/fair.c | 48 ++++++++++++++++++++++++++++++++++++---------
 1 file changed, 39 insertions(+), 9 deletions(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 7c53cb59a6a7..ddb1c60cabef 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6454,22 +6454,36 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 	int new_cpu = prev_cpu;
 	int want_affine = 0;
 	int sync = (wake_flags & WF_SYNC) && !(current->flags & PF_EXITING);
-	static unsigned long pos1_cnt, pos2_cnt, pos3_cnt, init_jiff, output, flag;
+	static unsigned long pos1_cnt, pos2_cnt, pos3_cnt, pos4_cnt, pos5_cnt, init_jiff, output, flag, tot_cnt;
+	static unsigned long pos1_tot, pos2_tot, pos3_tot, pos4_tot, pos5_tot;
 	if (strcmp(p->comm, target_task) == 0 && !flag) {
 		flag = 1;
 		init_jiff = jiffies;
 	}
+	if (strcmp(p->comm, target_task) == 0)
+		tot_cnt++;
 	if (jiffies > init_jiff + 180 * 250 && !output && init_jiff != 0) {
 		output = 1;
 		printk("cnt1:\t%lu\n", pos1_cnt);
+		printk("tot1:\t%lu\n", pos1_tot);
 		printk("cnt2:\t%lu\n", pos2_cnt);
+		printk("tot2:\t%lu\n", pos2_tot);
 		printk("cnt3:\t%lu\n", pos3_cnt);
+		printk("tot3:\t%lu\n", pos3_tot);
+		printk("cnt4:\t%lu\n", pos4_cnt);
+		printk("tot4:\t%lu\n", pos4_tot);
+		printk("cnt5:\t%lu\n", pos5_cnt);
+		printk("tot5:\t%lu\n", pos5_tot);
+		printk("tot:\t%lu\n", tot_cnt);
 	}
 #ifdef __loongarch__
 	if ((sd_flag & SD_BALANCE_FORK) && current_thread_info()->will_wait) {
 		if (cpumask_test_cpu(cpu, &p->cpus_allowed)) {
-			if (strcmp(p->comm, target_task) == 0)
-				pos1_cnt++;
+			if (strcmp(p->comm, target_task) == 0) {
+				pos1_tot++;
+				if (cpu / 4 == 0)
+					pos1_cnt++;
+			}
 			return cpu;
 		}
 	}
@@ -6483,8 +6497,11 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 		task_thread_info(p)->last_waketime = jiffies;
 		if ((p->last_wakee == current) && cpumask_test_cpu(cpu, &p->cpus_allowed)) {
 			if (time_after(current_thread_info()->last_waketime + 2, jiffies)) {
-				if (strcmp(p->comm, target_task) == 0)
-					pos2_cnt++;
+				if (strcmp(p->comm, target_task) == 0) {
+					pos2_tot++;
+					if (cpu / 4 == 0)
+						pos2_cnt++;
+				}
 				return cpu;
 			}
 		}
@@ -6502,8 +6519,14 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 		 */
 		if (want_affine && (tmp->flags & SD_WAKE_AFFINE) &&
 		    cpumask_test_cpu(prev_cpu, sched_domain_span(tmp))) {
-			if (cpu != prev_cpu)
+			if (cpu != prev_cpu) {
 				new_cpu = wake_affine(tmp, p, cpu, prev_cpu, sync);
+				if (strcmp(p->comm, target_task) == 0) {
+					pos3_tot++;
+					if (new_cpu / 4 == 0)
+						pos3_cnt++;
+				}
+			}
 
 			sd = NULL; /* Prefer wake_affine over balance flags */
 			break;
@@ -6518,17 +6541,24 @@ select_task_rq_fair(struct task_struct *p, int prev_cpu, int sd_flag, int wake_f
 	if (unlikely(sd)) {
 		/* Slow path */
 		new_cpu = find_idlest_cpu(sd, p, cpu, prev_cpu, sd_flag);
+		if (strcmp(p->comm, target_task) == 0) {
+			pos4_tot++;
+			if (new_cpu / 4 == 0)
+				pos4_cnt++;
+		}
 	} else if (sd_flag & SD_BALANCE_WAKE) { /* XXX always ? */
 		/* Fast path */
 
 		new_cpu = select_idle_sibling(p, prev_cpu, new_cpu);
-
+		if (strcmp(p->comm, target_task) == 0) {
+			pos5_tot++;
+			if (new_cpu / 4 == 0)
+				pos5_cnt++;
+		}
 		if (want_affine)
 			current->recent_used_cpu = cpu;
 	}
 	rcu_read_unlock();
-	if (strcmp(p->comm, target_task) == 0)
-		pos3_cnt++;
 	return new_cpu;
 }
 
-- 
2.20.1

