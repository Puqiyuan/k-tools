global start_times
global entry_count = 0
global MAX_ENTRIES = 1024
global flag = 1
global MAX_ELAPSED_TIME

probe begin {
    MAX_ELAPSED_TIME = 1000000000
}

// run_timer_softirq backlist
// blk_done_softirq backlist
// irq_poll_softirq backlist
// WARNING: tasklet_action_common maybe bug because tasklet_action_common.isra.2 when enter but return with tasklet_action
probe module("ipmi_msghandler").function("ipmi_free_recv_msg").call,
      module("ipmi_msghandler").function("acquire_ipmi_user").call,
      module("ipmi_devintf").function("file_receive_handler").call,
      module("ipmi_msghandler").function("deliver_response").call,
      module("ipmi_msghandler").function("deliver_local_response").call,
      module("ipmi_msghandler").function("handle_one_recv_msg").call,
      module("ipmi_msghandler").function("handle_new_recv_msgs").call,
      module("ipmi_msghandler").function("smi_recv_tasklet").call,
      kernel.function("tasklet_action_common").call
{
    if (entry_count >= MAX_ENTRIES) {
	//avoid overflow memory
        delete start_times;
	entry_count = 0;
	flag = 0;
    }
    start_times[tid(), probefunc()] = gettimeofday_ns();
    entry_count++;
}

probe module("ipmi_msghandler").function("ipmi_free_recv_msg").return,
      module("ipmi_msghandler").function("acquire_ipmi_user").return,
      module("ipmi_devintf").function("file_receive_handler").return,
      module("ipmi_msghandler").function("deliver_response").return,
      module("ipmi_msghandler").function("deliver_local_response").return,
      module("ipmi_msghandler").function("handle_one_recv_msg").return,
      module("ipmi_msghandler").function("handle_new_recv_msgs").return,
      module("ipmi_msghandler").function("smi_recv_tasklet").return,
      kernel.function("tasklet_action_common").return
{
    if ([tid(), probefunc()] in start_times) {
        elapsed_time = gettimeofday_ns() - start_times[tid(), probefunc()];
	delete start_times[tid(), probefunc()];
	entry_count--;

	if (flag)
	    printf("cnt: %d now: %ds cpu: %d tid: %d func: %s duration: %dns\n",
			entry_count, gettimeofday_s(), cpu(), tid(), probefunc(), elapsed_time);
	else {
	    if (elapsed_time > MAX_ELAPSED_TIME)
                printf("cnt: %d now: %ds cpu: %d tid: %d func: %s duration: %dns\n",
		        entry_count, gettimeofday_s(), cpu(), tid(), probefunc(), elapsed_time);
	}
    }
}
